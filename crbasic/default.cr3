''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Biogenic VOCs and Secondary Organic Aerosol at PROPHET - WSU 2014
' 
' Data acquisition for FIS and associated micrometeorological sensors
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
' 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''




'============================== WIRING =======================================

'FIS 
Const PMT_COM = Com1  'C1/C2  photomuliplier tube (PMT)
Const FIS_FLOW_TOT_DF = 1
Const FIS_FLOW_O2_DF = 2
Const FIS_FLOW_STD_DF = 3
Const FIS_STATE_STD_SE = 27
Const FIS_STATE_ZERO_SE = 28


'============================== CONSTANTS ====================================
Const CR = CHR(13) 'carriage return

'Operational configuration
Const FAST_INTV = 100 'ms = 10 Hz
Const SLOW_INTV = 1 'sec = 1 Hz
Const INTEG = 250

'FIS photomultiplier tube
Const PMT_INTEG = 10  '# of 10ms intervals to sum per reading; = 10 Hz
Const PMT_BAUD = 9600
Const PMT_FORMAT = 3  '8/none/1 in "binary" mode (
Const PMT_BUFF = 10  '4 bytes/reading * 2 + 1
Const PMT_CMD_SETINTEG = "P" & CHR(PMT_INTEG) & CR  'set integration time
Const PMT_CMD_SETVOLTAGE = "D" & CR  'set default high voltage
Const PMT_CMD_START = "C" & CR  'begin continuous read
Const PMT_CMD_STOP = CR

'FIS etc
Const FIS_FLOW_TOT_MULT = (10-0)/(5000-0) '0-10 sLpm / 0-5V
Const FIS_FLOW_TOT_OFFSET = 0
Const FIS_FLOW_O2_MULT = (2-0)/(5000-0) '0-2 sLpm / 0-5V
Const FIS_FLOW_O2_OFFSET = 0
Const FIS_FLOW_STD_MULT = (20-0)/(5000-0) '0-20 sccm / 0-5V
Const FIS_FLOW_STD_OFFSET = 0


'============================= VARIABLES =====================================
Dim pmt_record As String * 4
Dim pmt_bytes
Dim pmt_convert As Long

Public pmt_overflow As Boolean
Public pmt_counts
Units pmt_counts = counts

Public fis_flow(3)
Alias fis_flow(1) = FIS_flow_tot
Alias fis_flow(2) = FIS_flow_O2
Alias fis_flow(3) = FIS_flow_std
Units FIS_flow_tot = sLpm
Units FIS_flow_O2 = sLpm
Units FIS_flow_std = sccm

Dim fis_state(2) 'hack for reading TTL with SE 27,28 b/c too few control ports 
Alias fis_state(1) = FIS_state_std
Alias fis_state(2) = FIS_state_zero
Public fis_status(2) As Boolean
Alias fis_status(1) = FIS_is_calibrating
Alias fis_status(2) = FIS_is_zeroing

Dim just_had_1hz_scan As Boolean
Dim inbetween_1hz_scan As Boolean


'========================== CUSTOM MENUS =====================================
DisplayMenu("FIS DAQ", -1)
  DisplayValue("PMT counts", pmt_counts)
  DisplayValue("PMT overflow", pmt_overflow)
  DisplayValue("Total flow", FIS_flow_tot)
  DisplayValue("O2 flow", FIS_flow_O2)
  DisplayValue("Std. flow", FIS_flow_std)
  DisplayValue("Calibrating", FIS_is_calibrating)
  DisplayValue("Zeroing", FIS_is_zeroing)
EndMenu


'============================== SUBROUTINES ==================================
Sub setup()
  SerialOpen(PMT_COM,PMT_BAUD,PMT_FORMAT,0,PMT_BUFF)
  Call start_pmt()
EndSub

Sub start_pmt()
  'TODO check if a continuous measurement is already in progress!
  '     if so, send stop command, set integ time & voltage, then restart
  SerialOut(PMT_COM,PMT_CMD_SETINTEG,"",0,0) 'set integration time
  SerialOut(PMT_COM,PMT_CMD_SETVOLTAGE,"",0,0) 'enable high voltage
  SerialOut(PMT_COM,PMT_CMD_START,"",0,0) 'begin continuous readings
EndSub

Sub stop_pmt()
  SerialOut(PMT_COM,PMT_CMD_STOP,"",0,0) 'stop continuous readings
EndSub

'=============================== PROGRAM =====================================
ShutDownBegin
  Call stop_pmt()
ShutDownEnd

BeginProg
  Call setup()
  
  Scan(FAST_INTV,mSec,0,0)
    SerialInRecord(PMT_COM,pmt_record,0,4,0,pmt_bytes,11)
    If (pmt_bytes = 4) Then
      'check most significant bit of MSB (byte3)
      pmt_overflow = ASCII(pmt_record(1,1,3)) AND &h80
      If (pmt_overflow) Then 'check overflow bit
        pmt_counts = NAN
      Else
        MoveBytes(pmt_convert,0,pmt_record,3,1) 'reverse byte order
        MoveBytes(pmt_convert,1,pmt_record,2,1)
        MoveBytes(pmt_convert,2,pmt_record,1,1)
        MoveBytes(pmt_convert,3,pmt_record,0,1)
        pmt_counts = pmt_convert 'coerce to float
      EndIf
    Else
      pmt_counts = NAN
      pmt_overflow = False
    EndIf
      
    VoltDiff(FIS_flow_tot,1,mV5000,FIS_FLOW_TOT_DF,True,0,INTEG, _
        FIS_FLOW_TOT_MULT,FIS_FLOW_TOT_OFFSET)
    VoltDiff(FIS_flow_O2,1,mV5000,FIS_FLOW_O2_DF,True,0,INTEG, _
        FIS_FLOW_O2_MULT,FIS_FLOW_O2_OFFSET)
    VoltDiff(FIS_flow_std,1,mV5000,FIS_FLOW_STD_DF,True,0,INTEG, _
        FIS_FLOW_STD_MULT,FIS_FLOW_STD_OFFSET)
    
    'pretend SE 27, SE 28 are TTL inputs
    VoltSe(FIS_state_std,1,mV5000,FIS_STATE_STD_SE,False,0,INTEG,1,0)
    VoltSe(FIS_state_zero,1,mV5000,FIS_STATE_ZERO_SE,False,0,INTEG,1,0)
    FIS_is_calibrating = (FIS_state_std > 2500) 
    FIS_is_zeroing = (FIS_state_zero > 2500)

    inbetween_1hz_scan = True
    If (just_had_1hz_scan) Then
      just_had_1hz_scan = False
      inbetween_1hz_scan = False
    EndIf
  NextScan
  
  'slowsequence goes here
EndProg
